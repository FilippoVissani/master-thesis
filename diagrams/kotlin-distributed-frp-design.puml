@startuml
interface AggregateExpression<T> << interface >> {
  + compute(List<Slot>, Context): StateFlow<ExportTree<T>>
}
interface Context << interface >> {
  + updateLocalSensor(String, T): Unit
  + receiveExport(Int, ExportTree<?>): Unit
   selfID: Int
   sensorsStates: StateFlow<Map<String, ?>>
   neighborsStates: StateFlow<Map<Int, ExportTree<?>>>
}
interface ExportTree<T> << interface >> {
  + followPath(List<Slot>): ExportTree<?>?
   root: T
   children: Map<Slot, ExportTree<?>>
}
class Semantics {
  + mux(AggregateExpression<Boolean>, AggregateExpression<T>, AggregateExpression<T>): AggregateExpression<T>
  + neighbor(AggregateExpression<T>): AggregateExpression<Map<Int, T>>
  + branch(AggregateExpression<Boolean>, AggregateExpression<T>, AggregateExpression<T>): AggregateExpression<T>
  + loop(T, (AggregateExpression<T>) -> AggregateExpression<T>): AggregateExpression<T>
  + selfID(): AggregateExpression<Int>
}

enum Slot {
    Condition
    Then
    Else
    Key<T>(valure: T)
    Neighbor
    Operand(index: Int)
}

Semantics ..> AggregateExpression : produces
AggregateExpression ..> Context : uses
AggregateExpression ..> ExportTree : emits
Slot --o ExportTree

@enduml
