@startuml

interface Aggregate<ID> << interface >> {
  + exchange(...): Field<ID, Initial>
  + repeat(...): Initial
  + exchanging(...): Field<ID, Return>
  + repeating(...): Return
  + alignedOn(...): R
   localId: ID
}

class AggregateContext<ID> {
  + newState(): Map<Path, Object>
  + messagesToSend(): OutboundMessage<ID>
}

class AggregateResult<ID, R> {
   toSend: OutboundMessage<ID>
   newState: Map<Path, Object>
   result: R
   localId: ID
}

class Collektive<ID, R> {
  + cycle(): R
  + cycleWhile(Function1<AggregateResult<ID, R>, Boolean>): R
   state: Map<Path, Object>
   localId: ID
}

class Companion {
  + aggregate(ID, Iterable<InboundMessage<ID>>, Map<Path, Object>, Function1<Aggregate<ID>, R>): AggregateResult<ID, R>
  + aggregate(ID, Network<ID>, Map<Path, Object>, Function1<Aggregate<ID>, R>): AggregateResult<ID, R>
}

interface Stack << interface >> {
  + dealign(): Unit
  + alignRaw(Object?): Unit
  + currentPath(): Path
}

interface Path << interface >> {
  + tokens(): List<Object>
}

interface Field<ID, T> << interface >> {
   neighborsCount: Int
   localValue: T
   localId: ID
}

interface Network<ID> << interface >> {
  + read(): Collection<InboundMessage<ID>>
  + write(OutboundMessage<ID>): Unit
}

Collektive --+ Companion
AggregateContext --|> Aggregate
Companion ..> AggregateResult
Aggregate .up.> Field
Collektive .up.> Aggregate
Collektive .up.> Network
Stack .up.> Path
AggregateContext .up.> Stack

@enduml