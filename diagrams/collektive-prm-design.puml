@startuml

class StateFlowExtensions {
  + combineStates(Function0<T>, Flow<T>): StateFlow<T>
  + combineStates(StateFlow<T1>, StateFlow<T2>, Function2<T1, T2, R>): StateFlow<R>
  + combineStates(StateFlow<T1>, StateFlow<T2>, StateFlow<T3>, Function3<T1, T2, T3, R>): StateFlow<R>
  + flattenConcat(StateFlow<StateFlow<T>>): StateFlow<T>
  + mapStates(StateFlow<T>, Function1<T, R>): StateFlow<R>
}

interface Aggregate<ID> << interface >> {
  + rBranch(Function0<StateFlow<Boolean>>, Function0<StateFlow<T>>, Function0<StateFlow<T>>): StateFlow<T>
  + rExchange(T, Function1<StateFlow<Field<ID, T>>, StateFlow<Field<ID, T>>>): StateFlow<Field<ID, T>>
  + alignedOn(Object?, Function0<R>): R
}

class RAggregateContext<ID> {
    + rOutboundMessages(): StateFlow<OutboundMessage<ID>>
    + rState(): StateFlow<Map<Path, Object>>
    localId: ID
}

class RAggregateResult<ID, R> {
   result: StateFlow<R>
   toSend: StateFlow<OutboundMessage<ID>>
   state: StateFlow<Map<Path, Object>>
   localId: ID
}

class RCollektive<ID, R> {
   localId: ID
}

class Companion {
  + aggregate(ID, MutableStateFlow<List<InboundMessage<ID>>>, Function1<Aggregate<ID>, StateFlow<R>>): RAggregateResult<ID, R>
}

interface Stack << interface >> {
  + dealign(): Unit
  + alignRaw(Object?): Unit
  + currentPath(): Path
}

interface Path << interface >> {
  + tokens(): List<Object>
}

interface Field<ID, T> << interface >> {
   neighborsCount: Int
   localValue: T
   localId: ID
}

Companion +-- RCollektive
RAggregateContext --|> Aggregate
Stack ..> Path
RAggregateContext ..> Stack
RAggregateContext ..> StateFlowExtensions
Aggregate ..> Field
RCollektive ..> Aggregate
Companion ..> RAggregateResult

@enduml